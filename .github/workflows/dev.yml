name: Dev deployment of chatbot lambda function

on:
  push:
    branches: [dev]

jobs:
  test:
    name: Dev deployment of chatbot lambda function
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
      GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
      GOOGLE_AI_MODEL: ${{ vars.GOOGLE_AI_MODEL }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        id: python-setup
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Load cached venv
      #   id: dependencies-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: .venv
      #     key: venv-${{ runner.os }}-${{ steps.python-setup.outputs.python-version }}

      - name: Create Venv if Cache not found
        # if: steps.dependencies-cache.outputs.cache-hit != 'true'
        run: |
          python -m venv .venv

      - name: Install dependencies
        # if: steps.dependencies-cache.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        if: always()
        run: |
          source .venv/bin/activate
          pytest --junit-xml=./reports/pytest.xml --tb=auto -v

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./reports/pytest.xml
          if-no-files-found: warn

  deploy:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Created the Secrets Under the Repo only with These Variables
          aws-access-key-id: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_ID }}
          aws-secret-access-key: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_SECRET }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push the tagged docker image to Amazon ECR
        id: build-custom-image
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: lambda-feedback-dev-chat
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update aws custom lambda function code
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: lambda-feedback-dev-chat
          IMAGE_TAG: latest
          FUNCTION_NAME: lambda-feedback-dev-chat
        run: |
          aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # build:
  #   name: Build Docker Image
  #   uses: lambda-feedback/chat-function-workflows/.github/workflows/gh_build.yml@main
  #   needs: test
  #   permissions:
  #     contents: read
  #     id-token: write
  #     packages: write

  # deploy:
  #   name: Deploy to Lambda Feedback
  #   uses: lambda-feedback/chat-function-workflows/.github/workflows/dev_deploy.yml@main
  #   needs: test
  #   with:
  #     template-repository-name: "lambda-feedback/chat-function-boilerplate"
  #   permissions:
  #     contents: read
  #     id-token: write
  #     packages: write
  #   secrets:
  #     aws-access-key-id: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_ID }}
  #     aws-secret-key: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_SECRET}}
